Flatten a Dictionary





A dictionary is a type of data structure that is supported natively in all major interpreted languages such as JavaScript, Python, Ruby and PHP, where it’s known as an Object, Dictionary, Hash and Array, respectively. In simple terms, a dictionary is a collection of unique keys and their values. The values can typically be of any primitive type (i.e an integer, boolean, double, string etc) or other dictionaries (dictionaries can be nested). However, for this exercise assume that values are either an integer, a string or another dictionary.

Given a dictionary dict, write a function flattenDictionary that returns a flattened version of it .

If you’re using a compiled language such Java, C++, C#, Swift and Go, you may want to use a Map/Dictionary/Hash Table that maps strings (keys) to a generic type (e.g. Object in Java, AnyObject in Swift etc.) to allow nested dictionaries.

If a certain key is empty, it should be excluded from the output (see e in the example below).


	Test Case #1
	Input: {"Key1":"1","Key2":{"a":"2","b":"3","c":{"d":"3","e":"1"}}}
	Expected: {"Key1":"1","Key2.a":"2","Key2.b":"3","Key2.c.d":"3","Key2.c.e":"1"}

	Test Case#1
	Input: {"Key":{"a":"2","b":"3"}}
	Expected: {"Key.a":"2","Key.b":"3"}

	Test Case #2
	Input: {"Key":{"a":"2","b":"3"}}
	Expected: {"Key.a":"2","Key.b":"3"}

	Test Case #3
	Input: {"Key1":"1","Key2":{"a":"2","b":"3","c":{"d":"3","e":{"f":"4"}}}}
	Expected: {"Key1":"1","Key2.a":"2","Key2.b":"3","Key2.c.d":"3","Key2.c.e.f":"4"}

	Test Case #4
	Input: {"":{"a":"1"},"b":"3"}
	Expected: {"a":"1","b":"3"}

	Test Case #5
	Input: {"a":{"b":{"c":{"d":{"e":{"f":{"":"pramp"}}}}}}}
	Expected: {"a.b.c.d.e.f":"pramp"}

	Test Case #6
	Input: {"a":"1"}
	Expected: {"a":"1"}
--------------------------------------------------------------------------------------------------------------------------------------------






Sales Path



The car manufacturer Honda holds their distribution system in the form of a tree (not necessarily binary). The root is the company itself, and every node in the tree represents a car distributor that receives cars from the parent node and ships them to its children nodes. The leaf nodes are car dealerships that sell cars direct to consumers. In addition, every node holds an integer that is the cost of shipping a car to it.

Take for example the tree below:

0------	5------	4
|
L------	3------	0------	10
|	L------	2------	1------	1
|
L------	6------	1
	L------	5

A path from Honda’s factory to a car dealership, which is a path from the root to a leaf in the tree, is called a Sales Path. The cost of a Sales Path is the sum of the costs for every node in the path. For example, in the tree above one Sales Path is 0→3→0→10, and its cost is 13 (0+3+0+10).

Honda wishes to find the minimal Sales Path cost in its distribution tree. Given a node rootNode, write a function getCheapestCost that calculates the minimal Sales Path cost in the tree.

Implement your function in the most efficient manner and analyze its time and space complexities.

For example:

Given the rootNode of the tree in diagram above

Your function would return:

7 since it’s the minimal Sales Path cost (there are actually two Sales Paths in the tree whose cost is 7: 0->6->1 and 0->3->2->1->1)




--------------------------------------------------------------------------------------------------------------------------------------------





Number of Paths




You’re testing a new driverless car that is located at the Southwest (bottom-left) corner of an n×n grid. The car is supposed to get to the opposite, Northeast (top-right), corner of the grid. Given n, the size of the grid’s axes, write a function numOfPathsToDest that returns the number of the possible paths the driverless car can take.


|x|x|x|x|o
|x|x|x|o|o
|x|x|o|o|o
|x|o|o|o|o
|o|o|o|o|o

For convenience, let’s represent every square in the grid as a pair (i,j). The first coordinate in the pair denotes the east-to-west axis, and the second coordinate denotes the south-to-north axis. The initial state of the car is (0,0), and the destination is (n-1,n-1).

The car must abide by the following two rules: it cannot cross the diagonal border. In other words, in every step the position (i,j) needs to maintain i >= j. See the illustration above for n = 5. In every step, it may go one square North (up), or one square East (right), but not both. E.g. if the car is at (3,1), it may go to (3,2) or (4,1).

Explain the correctness of your function, and analyze its time and space complexities.


	Test Case #1
	Input: 1
	Expected: 1

	Test Case #2
	Input: 2
	Expected: 1

	Test Case #3
	Input: 3
	Expected: 2

	Test Case #4
	Input: 4
	Expected: 5

	Test Case #5
	Input: 6
	Expected: 42

	Test Case #6
	Input: 17
	Expected: 35357670





--------------------------------------------------------------------------------------------------------------------------------------------





Award Budget Cuts





To solve this problem, we start by checking whether one of the values in grantsArray can be the cap. To do so systematically, we first sort the array in a descending order, and then check the grants one by one, from largest to smallest. Said differently, If a grant grantsArray[i] is not sufficient as a cap since it doesn’t allow us to meet the newBudget constraint, we move on to the next grant grantsArray[i+1]. We continue using smaller and smaller grants as potential caps until we either meet the budget constraint or go below it.
If none of the grantsArray values helped us meet the new budget constraint, then by definition cap is less than the smallest grant, i.e. 0 < cap < grantsArray[grantsArray.length - 1]. To accommodate this special case, we’ll append for convenience the value 0 to the grantsArray. This will make our calculations easier. Think of it as the N+1 grant only with the value of 0.
Now, clearly there is no guarantee that any of the values in grantsArray equals to cap. However, what the iteration above helped us do is find a tight lower bound to cap from which we’ll be able to calculate cap.
Here’s how we do it. We first define a new variable surplus which represents the excess amount we need to cut back i.e. surplus = sum(grantsArray) - newBudget. Next, we iteratively subtract from surplus the amount each grant in grantsArray saves us if it were cap. Our goal is to find the first for which such surplus == 0. Here’s how the first few iterations would look like:
surplus1 = surplus0 - 1*(grantsArray[0]-grantsArray[1]).
surplus2 = surplus1 - 2*(grantsArray[1]-grantsArray[2]).
surplus3 = surplus2 - 3*(grantsArray[2]-grantsArray[3]).
Notice that we multiply the difference, let’s name it
di
, between two consecutive grants by i+1 since at every iteration, each of the (i+1) previous grants now needs be lowered by
di.
The total amount saved is therefore
(i+1)*di
. The above last step helped us find only a tight lower bound to cap and not necessarily cap itself. But that could be easily fixed. Since surplus at this point is either 0 or less than 0, we simply take the absolute of that value, i.e. -surplus, divide it by (i+1), and add the result to the lower bound we found. 

	Test Case #1
	Input: [2,4], 3
	Expected: 1.5

	Test Case #2
	Input: [2,4,6], 3
	Expected: 1

	Test Case #3
	Input: [2,100,50,120,167], 400
	Expected: 128

	Test Case #4
	Input: [2,100,50,120,1000], 190
	Expected: 47

	Test Case #5
	Input: [21,100,50,120,130,110], 140
	Expected: 23.8

	Test Case #6
	Input: [210,200,150,193,130,110,209,342,117], 1530
	Expected: 211
